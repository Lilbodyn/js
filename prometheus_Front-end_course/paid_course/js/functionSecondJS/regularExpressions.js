/* pattern
Текст регулярного выражения.

flags
Если определён, может принимать любую комбинацию нижеследующих значений:

g
глобальное сопоставление

i
игнорирование регистра при сопоставлении

m
сопоставление по нескольким строкам; символы начала и конца (^ и $) начинают работать по нескольким строкам (то есть, происходит сопоставление с началом или концом каждой строки (строки разделяются символами \n или \r), а не только с началом или концом всей вводимой строки)

y Экспериментальная возможность
«липкий» поиск; сопоставление в целевой строке начинается с индекса, на который указывает свойство lastIndex этого регулярного выражения (и не пытается сопоставиться с любого более позднего индекса).
 */
/* const regexp1 = new RegExp(`<${tag}>`, igm)  // щоб згенерувати регулярний вираз за допомогою зміної(текстом зі стрічки ${tag})
const regexp2 = /div/g; */

const string = 'Hello Hi Hello';
const regexp = /hello/ig;  // якір i не звертає уваги на верхній чи нижній регістир, якір g буде шукати всі, а не лише перший результат

console.log(string.match(regexp)) // пошук

const string2 = 'We will, we will';
const regexp3 = /we/ig;

console.log(string.replace(regexp, 'I')) //Замінює на інші слова

const string3 = 'I love Javascript';
const regexp4 = /javascript/ig;

console.log(regexp4.test(string3)) // Чи присутній елемент у стрічці